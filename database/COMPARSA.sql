/* SQL Manager for InterBase and Firebird 5.2.6.45382 */
/* -------------------------------------------------- */
/* Host     : 192.168.1.66                            */
/* Database : COMPARSA                                */


CREATE DATABASE '192.168.1.66/3050:COMPARSA'   USER 'SYSDBA'
   PAGE_SIZE 4096
   DEFAULT CHARACTER SET WIN1252;

/* Definition for the `D_INTEGER` domain :  */

CREATE DOMAIN D_INTEGER AS
  INTEGER;

/* Definition for the `D_VARCHAR100` domain :  */

CREATE DOMAIN D_VARCHAR100 AS
  VARCHAR(100);

/* Structure for the `TIPOINSUMO` table :  */

CREATE TABLE TIPOINSUMO (
  TIPOINSUMOID D_INTEGER NOT NULL,
  NOMBRE D_VARCHAR100);


ALTER TABLE TIPOINSUMO ADD CONSTRAINT PK_TIPOINSUMO PRIMARY KEY (TIPOINSUMOID);

/* Definition for the `D_MEMOBLOB512` domain :  */

CREATE DOMAIN D_MEMOBLOB512 AS
  BLOB SUB_TYPE 1 SEGMENT SIZE 512;

/* Definition for the `D_NUMERIC_15_4` domain :  */

CREATE DOMAIN D_NUMERIC_15_4 AS
  NUMERIC(15, 4)
  DEFAULT 0;

/* Definition for the `D_VARCHAR20` domain :  */

CREATE DOMAIN D_VARCHAR20 AS
  VARCHAR(20);

/* Structure for the `INSUMO` table :  */

CREATE TABLE INSUMO (
  INSUMOID D_INTEGER NOT NULL,
  CODIGO D_VARCHAR20,
  NOMBRE D_VARCHAR100,
  TIPOINSUMOID D_INTEGER,
  TOTALENTRADAS D_NUMERIC_15_4,
  TOTALSALIDAS D_NUMERIC_15_4,
  EXISTENCIA D_NUMERIC_15_4,
  NOTAS D_MEMOBLOB512);


ALTER TABLE INSUMO ADD CONSTRAINT PK_INSUMO PRIMARY KEY (INSUMOID);

ALTER TABLE INSUMO ADD CONSTRAINT FK_INSUMO FOREIGN KEY (TIPOINSUMOID) REFERENCES TIPOINSUMO(TIPOINSUMOID);

/* Definition for the `D_BOOL` domain :  */

CREATE DOMAIN D_BOOL AS
  SMALLINT
  DEFAULT 0
  CHECK (VALUE IN (0,1));

/* Definition for the `D_VARCHAR10` domain :  */

CREATE DOMAIN D_VARCHAR10 AS
  VARCHAR(10);

/* Definition for the `D_VARCHAR200` domain :  */

CREATE DOMAIN D_VARCHAR200 AS
  VARCHAR(200);

/* Definition for the `D_VARCHAR50` domain :  */

CREATE DOMAIN D_VARCHAR50 AS
  VARCHAR(50);

/* Structure for the `COLABORADOR` table :  */

CREATE TABLE COLABORADOR (
  COLABORADORID D_INTEGER NOT NULL,
  CODIGO D_VARCHAR10,
  NOMBRE D_VARCHAR100,
  CALLE D_VARCHAR50,
  NUMEXT D_VARCHAR10,
  NUMINT D_VARCHAR10,
  COLONIA D_VARCHAR50,
  MUNICIPIO D_VARCHAR50,
  ESTADO D_VARCHAR50,
  ESBRIGADISTA D_BOOL,
  ESDONANTE D_BOOL,
  INSTITUCION D_VARCHAR100,
  NOTAS D_MEMOBLOB512,
  TWITTER D_VARCHAR200,
  FACEBOOK D_VARCHAR200,
  TELEFONO D_VARCHAR50,
  EMAIL D_VARCHAR50,
  POBLACION D_VARCHAR50,
  REFERIDOPOR D_VARCHAR100);


ALTER TABLE COLABORADOR ADD CONSTRAINT PK_COLABORADOR PRIMARY KEY (COLABORADORID);

/* Definition for the `D_DATE` domain :  */

CREATE DOMAIN D_DATE AS
  DATE;

/* Definition for the `D_TIME` domain :  */

CREATE DOMAIN D_TIME AS
  TIME;

/* Structure for the `ENTRADA` table :  */

CREATE TABLE ENTRADA (
  ENTRADAID D_INTEGER NOT NULL,
  NUMERO D_VARCHAR10,
  FECHA D_DATE,
  HORA D_TIME,
  DONANTEID D_INTEGER,
  RESPONSABLEID D_INTEGER,
  NOTAS D_MEMOBLOB512);


ALTER TABLE ENTRADA ADD CONSTRAINT PK_ENTRADA PRIMARY KEY (ENTRADAID);

ALTER TABLE ENTRADA ADD CONSTRAINT FK_ENTRADA_DONANTE FOREIGN KEY (DONANTEID) REFERENCES COLABORADOR(COLABORADORID);

ALTER TABLE ENTRADA ADD CONSTRAINT FK_ENTRADA_RESPONSABLE FOREIGN KEY (RESPONSABLEID) REFERENCES COLABORADOR(COLABORADORID);

/* Structure for the `ENTRADADET` table :  */

CREATE TABLE ENTRADADET (
  ENTRADADETID D_INTEGER NOT NULL,
  ENTRADAID D_INTEGER NOT NULL,
  INSUMOID D_INTEGER NOT NULL,
  CANTIDAD D_NUMERIC_15_4 DEFAULT 0,
  NOTAS D_MEMOBLOB512);


ALTER TABLE ENTRADADET ADD CONSTRAINT PK_ENTRADADET PRIMARY KEY (ENTRADADETID);

ALTER TABLE ENTRADADET ADD CONSTRAINT FK_ENTRADADET_ENTRADA FOREIGN KEY (ENTRADAID) REFERENCES ENTRADA(ENTRADAID) ON DELETE CASCADE;

ALTER TABLE ENTRADADET ADD CONSTRAINT FK_ENTRADADET_INSUMO FOREIGN KEY (INSUMOID) REFERENCES INSUMO(INSUMOID);

/* Definition for the `AIU_ENTRADADET_EXIST` trigger :  */

SET TERM ^ ;

CREATE TRIGGER AIU_ENTRADADET_EXIST FOR ENTRADADET
ACTIVE BEFORE INSERT OR UPDATE
POSITION 0
AS
BEGIN
  
  UPDATE INSUMO
  SET 
    TOTALENTRADAS = COALESCE(TOTALENTRADAS, 0) + COALESCE(NEW.CANTIDAD, 0) - COALESCE(OLD.CANTIDAD, 0),
    EXISTENCIA = COALESCE(EXISTENCIA, 0) + COALESCE(NEW.CANTIDAD, 0) - COALESCE(OLD.CANTIDAD, 0)
  WHERE
    INSUMOID = NEW.INSUMOID;
  
END^

SET TERM ; ^

/* Structure for the `INVENTARIO` table :  */

CREATE TABLE INVENTARIO (
  INVENTARIOID D_INTEGER NOT NULL,
  NUMERO D_VARCHAR10,
  FECHA D_DATE,
  HORA D_TIME,
  NOTAS D_MEMOBLOB512,
  ACTUAL D_BOOL DEFAULT 0);


ALTER TABLE INVENTARIO ADD CONSTRAINT PK_INVENTARIO PRIMARY KEY (INVENTARIOID);

/* Definition for the `AI_ENTRADA_INVACTUAL` trigger :  */

SET TERM ^ ;

CREATE TRIGGER AI_ENTRADA_INVACTUAL FOR ENTRADA
ACTIVE AFTER INSERT
POSITION 0
AS
BEGIN
  
  UPDATE INVENTARIO
  SET
    ACTUAL = 0
  WHERE
    ACTUAL = 1;

END^

SET TERM ; ^

/* Structure for the `LOCALIDAD` table :  */

CREATE TABLE LOCALIDAD (
  LOCALIDADID D_INTEGER NOT NULL,
  NOMBRE D_VARCHAR100,
  ESTADO D_VARCHAR50,
  MUNICIPIO D_VARCHAR50,
  NOTAS D_MEMOBLOB512);


ALTER TABLE LOCALIDAD ADD CONSTRAINT PK_LOCALIDAD PRIMARY KEY (LOCALIDADID);

/* Structure for the `SALIDA` table :  */

CREATE TABLE SALIDA (
  SALIDAID D_INTEGER NOT NULL,
  NUMERO D_VARCHAR10,
  FECHA D_DATE,
  HORA D_TIME,
  RESPONSABLEID D_INTEGER,
  LOCALIDADID D_INTEGER,
  NOTAS D_MEMOBLOB512);


ALTER TABLE SALIDA ADD CONSTRAINT PK_SALIDA PRIMARY KEY (SALIDAID);

ALTER TABLE SALIDA ADD CONSTRAINT FK_SALIDA_LOCALIDAD FOREIGN KEY (LOCALIDADID) REFERENCES LOCALIDAD(LOCALIDADID);

ALTER TABLE SALIDA ADD CONSTRAINT FK_SALIDA_RESPONSABLE FOREIGN KEY (RESPONSABLEID) REFERENCES COLABORADOR(COLABORADORID);

/* Definition for the `AI_SALIDA_INVACTUAL` trigger :  */

SET TERM ^ ;

CREATE TRIGGER AI_SALIDA_INVACTUAL FOR SALIDA
ACTIVE AFTER INSERT
POSITION 0
AS
BEGIN

  UPDATE INVENTARIO
  SET
    ACTUAL = 0
  WHERE
    ACTUAL = 1;

END^

SET TERM ; ^

/* Definition for the `BD_ENTRADADET_EXIST` trigger :  */

SET TERM ^ ;

CREATE TRIGGER BD_ENTRADADET_EXIST FOR ENTRADADET
ACTIVE BEFORE DELETE
POSITION 0
AS
BEGIN

  UPDATE INSUMO
  SET 
    TOTALENTRADAS = COALESCE(TOTALENTRADAS, 0) - COALESCE(OLD.CANTIDAD, 0),
    EXISTENCIA = COALESCE(EXISTENCIA, 0) - COALESCE(OLD.CANTIDAD, 0)
  WHERE
    INSUMOID = OLD.INSUMOID;
  
END^

SET TERM ; ^

/* Structure for the `SALIDADET` table :  */

CREATE TABLE SALIDADET (
  SALIDADETID D_INTEGER NOT NULL,
  SALIDAID D_INTEGER NOT NULL,
  INSUMOID D_INTEGER,
  CANTIDAD D_NUMERIC_15_4 DEFAULT 0,
  CANTIDADRET D_NUMERIC_15_4 DEFAULT 0,
  NOTAS D_MEMOBLOB512);


ALTER TABLE SALIDADET ADD CONSTRAINT PK_SALIDADET PRIMARY KEY (SALIDADETID);

ALTER TABLE SALIDADET ADD CONSTRAINT FK_SALIDADET_INSUMO FOREIGN KEY (INSUMOID) REFERENCES INSUMO(INSUMOID);

ALTER TABLE SALIDADET ADD CONSTRAINT FK_SALIDADET_SALIDA FOREIGN KEY (SALIDAID) REFERENCES SALIDA(SALIDAID) ON DELETE CASCADE;

/* Definition for the `BD_SALIDADET_EXIST` trigger :  */

SET TERM ^ ;

CREATE TRIGGER BD_SALIDADET_EXIST FOR SALIDADET
ACTIVE BEFORE DELETE
POSITION 0
AS
BEGIN
  
  UPDATE INSUMO
  SET 
    TOTALSALIDAS = 
      COALESCE(TOTALSALIDAS, 0) -
      (COALESCE(OLD.CANTIDAD, 0) - COALESCE(OLD.CANTIDADRET, 0)),
    EXISTENCIA = 
      COALESCE(EXISTENCIA, 0) + 
      (COALESCE(OLD.CANTIDAD, 0) - COALESCE(OLD.CANTIDADRET, 0))
  WHERE
    INSUMOID = OLD.INSUMOID;

END^

SET TERM ; ^

/* Definition for the `BIU_SALIDADET_EXIST` trigger :  */

SET TERM ^ ;

CREATE TRIGGER BIU_SALIDADET_EXIST FOR SALIDADET
ACTIVE BEFORE INSERT OR UPDATE
POSITION 1
AS
BEGIN
  
  UPDATE INSUMO
  SET 
    TOTALSALIDAS = 
      COALESCE(TOTALSALIDAS, 0) + 
      (COALESCE(NEW.CANTIDAD, 0) - COALESCE(NEW.CANTIDADRET, 0)) - 
      (COALESCE(OLD.CANTIDAD, 0) - COALESCE(OLD.CANTIDADRET, 0)),
    EXISTENCIA = 
      COALESCE(EXISTENCIA, 0) - 
      (COALESCE(NEW.CANTIDAD, 0) - COALESCE(NEW.CANTIDADRET, 0)) + 
      (COALESCE(OLD.CANTIDAD, 0) - COALESCE(OLD.CANTIDADRET, 0))
  WHERE
    INSUMOID = NEW.INSUMOID;
  
END^

SET TERM ; ^

/* Structure for the `AFECTADO` table :  */

CREATE TABLE AFECTADO (
  AFECTADOID D_INTEGER NOT NULL,
  CODIGO D_VARCHAR10,
  NOMBRE D_VARCHAR100,
  ESTATUS D_INTEGER,
  CALLE D_VARCHAR50,
  NUMEXT D_VARCHAR10,
  NUMINT D_VARCHAR10,
  COLONIA D_VARCHAR50,
  LOCALIDADID D_INTEGER,
  MUNICIPIO D_VARCHAR50,
  ESTADO D_VARCHAR50,
  TELEFONO D_VARCHAR50,
  EMAIL D_VARCHAR50,
  TWITTER D_VARCHAR200,
  FACEBOOK D_VARCHAR200,
  DICTAMEN D_MEMOBLOB512,
  NOTAS D_MEMOBLOB512);


ALTER TABLE AFECTADO ADD CONSTRAINT PK_AFECTADO PRIMARY KEY (AFECTADOID);

ALTER TABLE AFECTADO ADD CONSTRAINT FK_AFECTADO_LOCALIDAD FOREIGN KEY (LOCALIDADID) REFERENCES LOCALIDAD(LOCALIDADID);

/* Structure for the `AFECTADOREQ` table :  */

CREATE TABLE AFECTADOREQ (
  AFECTADOREQID D_INTEGER NOT NULL,
  AFECTADOID D_INTEGER,
  TIPOINSUMOID D_INTEGER);


ALTER TABLE AFECTADOREQ ADD CONSTRAINT PK_AFECTADOREQ PRIMARY KEY (AFECTADOREQID);

ALTER TABLE AFECTADOREQ ADD CONSTRAINT FK_AFECTADOREQ_AFECTADO FOREIGN KEY (AFECTADOID) REFERENCES AFECTADO(AFECTADOID) ON DELETE CASCADE;

ALTER TABLE AFECTADOREQ ADD CONSTRAINT FK_AFECTADOREQ_TIPOINSUMO FOREIGN KEY (TIPOINSUMOID) REFERENCES TIPOINSUMO(TIPOINSUMOID) ON DELETE CASCADE;

/* Definition for the `AFECTADOREQ_ID_GEN` generator :  */

CREATE GENERATOR AFECTADOREQ_ID_GEN;

/* Definition for the `BI_AFECTADOREQ_ID` trigger :  */

SET TERM ^ ;

CREATE TRIGGER BI_AFECTADOREQ_ID FOR AFECTADOREQ
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
  IF ((NEW.AFECTADOREQID IS NULL) OR (NEW.AFECTADOREQID = 0)) THEN
      NEW.AFECTADOREQID = GEN_ID(AFECTADOREQ_ID_GEN, 1);
END^

SET TERM ; ^

/* Definition for the `AFECTADO_ID_GEN` generator :  */

CREATE GENERATOR AFECTADO_ID_GEN;

/* Definition for the `BI_AFECTADO_ID` trigger :  */

SET TERM ^ ;

CREATE TRIGGER BI_AFECTADO_ID FOR AFECTADO
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
  IF ((NEW.AFECTADOID IS NULL) OR (NEW.AFECTADOID = 0)) THEN
      NEW.AFECTADOID = GEN_ID(AFECTADO_ID_GEN, 1);
END^

SET TERM ; ^

/* Structure for the `COLABORADORAPORTA` table :  */

CREATE TABLE COLABORADORAPORTA (
  COLABORADORAPORTAID D_INTEGER NOT NULL,
  COLABORADORID D_INTEGER,
  TIPOINSUMOID D_INTEGER);


ALTER TABLE COLABORADORAPORTA ADD CONSTRAINT PK_COLABORADORAPORTA PRIMARY KEY (COLABORADORAPORTAID);

ALTER TABLE COLABORADORAPORTA ADD CONSTRAINT FK_COLABORADORAPORTA_COLAB FOREIGN KEY (COLABORADORID) REFERENCES COLABORADOR(COLABORADORID) ON DELETE CASCADE;

ALTER TABLE COLABORADORAPORTA ADD CONSTRAINT FK_COLABORADORAPORTA_TIPOINS FOREIGN KEY (TIPOINSUMOID) REFERENCES TIPOINSUMO(TIPOINSUMOID) ON DELETE CASCADE;

/* Definition for the `COLABORADORAPORTA_ID_GEN` generator :  */

CREATE GENERATOR COLABORADORAPORTA_ID_GEN;

/* Definition for the `BI_COLABORADORAPORTA_ID` trigger :  */

SET TERM ^ ;

CREATE TRIGGER BI_COLABORADORAPORTA_ID FOR COLABORADORAPORTA
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
  IF ((NEW.COLABORADORAPORTAID IS NULL) OR (NEW.COLABORADORAPORTAID = 0)) THEN
      NEW.COLABORADORAPORTAID = GEN_ID(COLABORADORAPORTA_ID_GEN, 1);
END^

SET TERM ; ^

/* Definition for the `COLABORADOR_ID_GEN` generator :  */

CREATE GENERATOR COLABORADOR_ID_GEN;

/* Definition for the `BI_COLABORADOR_ID` trigger :  */

SET TERM ^ ;

CREATE TRIGGER BI_COLABORADOR_ID FOR COLABORADOR
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
  IF ((NEW.COLABORADORID IS NULL) OR (NEW.COLABORADORID = 0)) THEN
      NEW.COLABORADORID = GEN_ID(COLABORADOR_ID_GEN, 1);
END^

SET TERM ; ^

/* Definition for the `ENTRADADET_ID_GEN` generator :  */

CREATE GENERATOR ENTRADADET_ID_GEN;

/* Definition for the `BI_ENTRADADET_ID` trigger :  */

SET TERM ^ ;

CREATE TRIGGER BI_ENTRADADET_ID FOR ENTRADADET
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
  IF ((NEW.ENTRADADETID IS NULL) OR (NEW.ENTRADADETID = 0)) THEN
      NEW.ENTRADADETID = GEN_ID(ENTRADADET_ID_GEN, 1);
END^

SET TERM ; ^

/* Definition for the `ENTRADA_ID_GEN` generator :  */

CREATE GENERATOR ENTRADA_ID_GEN;

/* Definition for the `BI_ENTRADA_ID` trigger :  */

SET TERM ^ ;

CREATE TRIGGER BI_ENTRADA_ID FOR ENTRADA
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
  IF ((NEW.ENTRADAID IS NULL) OR (NEW.ENTRADAID = 0)) THEN
      NEW.ENTRADAID = GEN_ID(ENTRADA_ID_GEN, 1);
END^

SET TERM ; ^

/* Definition for the `INSUMO_ID_GEN` generator :  */

CREATE GENERATOR INSUMO_ID_GEN;

/* Definition for the `BI_INSUMO_ID` trigger :  */

SET TERM ^ ;

CREATE TRIGGER BI_INSUMO_ID FOR INSUMO
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
  IF ((NEW.INSUMOID IS NULL) OR (NEW.INSUMOID = 0)) THEN
      NEW.INSUMOID = GEN_ID(INSUMO_ID_GEN, 1);
END^

SET TERM ; ^

/* Structure for the `INVENTARIODET` table :  */

CREATE TABLE INVENTARIODET (
  INVENTARIODETID D_INTEGER NOT NULL,
  INVENTARIOID D_INTEGER NOT NULL,
  INSUMOID D_INTEGER NOT NULL,
  EXISTTEORICA D_NUMERIC_15_4 DEFAULT 0,
  EXISTREAL D_NUMERIC_15_4 DEFAULT 0,
  EXISTDIFERENCIA D_NUMERIC_15_4 DEFAULT 0,
  NOTAS D_MEMOBLOB512);


ALTER TABLE INVENTARIODET ADD CONSTRAINT PK_INVENTARIODET PRIMARY KEY (INVENTARIODETID);

ALTER TABLE INVENTARIODET ADD CONSTRAINT FK_INVENTARIODET_INSUMO FOREIGN KEY (INSUMOID) REFERENCES INSUMO(INSUMOID);

ALTER TABLE INVENTARIODET ADD CONSTRAINT FK_INVENTARIODET_INVENTARIO FOREIGN KEY (INVENTARIOID) REFERENCES INVENTARIO(INVENTARIOID) ON DELETE CASCADE;

/* Definition for the `INVENTARIODET_ID_GEN` generator :  */

CREATE GENERATOR INVENTARIODET_ID_GEN;

/* Definition for the `BI_INVENTARIODET_ID` trigger :  */

SET TERM ^ ;

CREATE TRIGGER BI_INVENTARIODET_ID FOR INVENTARIODET
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
  IF ((NEW.INVENTARIODETID IS NULL) OR (NEW.INVENTARIODETID = 0)) THEN
      NEW.INVENTARIODETID = GEN_ID(INVENTARIODET_ID_GEN, 1);
END^

SET TERM ; ^

/* Definition for the `INVENTARIO_ID_GEN` generator :  */

CREATE GENERATOR INVENTARIO_ID_GEN;

/* Definition for the `BI_INVENTARIO_ID` trigger :  */

SET TERM ^ ;

CREATE TRIGGER BI_INVENTARIO_ID FOR INVENTARIO
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
  IF ((NEW.INVENTARIOID IS NULL) OR (NEW.INVENTARIOID = 0)) THEN
      NEW.INVENTARIOID = GEN_ID(INVENTARIO_ID_GEN, 1);
END^

SET TERM ; ^

/* Definition for the `LOCALIDAD_ID_GEN` generator :  */

CREATE GENERATOR LOCALIDAD_ID_GEN;

/* Definition for the `BI_LOCALIDAD_ID` trigger :  */

SET TERM ^ ;

CREATE TRIGGER BI_LOCALIDAD_ID FOR LOCALIDAD
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
  IF ((NEW.LOCALIDADID IS NULL) OR (NEW.LOCALIDADID = 0)) THEN
      NEW.LOCALIDADID = GEN_ID(LOCALIDAD_ID_GEN, 1);
END^

SET TERM ; ^

/* Definition for the `D_TIMESTAMP` domain :  */

CREATE DOMAIN D_TIMESTAMP AS
  TIMESTAMP;

/* Structure for the `NUMEROBLOQ` table :  */

CREATE TABLE NUMEROBLOQ (
  NUMEROBLOQID D_INTEGER NOT NULL,
  TIPONUMERO D_INTEGER,
  NUMERO D_VARCHAR20,
  FECHAHORA D_TIMESTAMP,
  USUARIOID D_INTEGER,
  NOMBREPC D_VARCHAR50);


ALTER TABLE NUMEROBLOQ ADD CONSTRAINT PK_NUMEROBLOQ PRIMARY KEY (NUMEROBLOQID);

/* Definition for the `BI_NUMEROBLOQ_FECHAHORA` trigger :  */

SET TERM ^ ;

CREATE TRIGGER BI_NUMEROBLOQ_FECHAHORA FOR NUMEROBLOQ
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
  NEW.FECHAHORA = CURRENT_TIMESTAMP;
END^

SET TERM ; ^

/* Definition for the `NUMEROBLOQ_ID_GEN` generator :  */

CREATE GENERATOR NUMEROBLOQ_ID_GEN;

/* Definition for the `BI_NUMEROBLOQ_ID` trigger :  */

SET TERM ^ ;

CREATE TRIGGER BI_NUMEROBLOQ_ID FOR NUMEROBLOQ
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
  IF ((NEW.NUMEROBLOQID IS NULL) OR (NEW.NUMEROBLOQID = 0)) THEN
      NEW.NUMEROBLOQID = GEN_ID(NUMEROBLOQ_ID_GEN, 1);
END^

SET TERM ; ^

/* Definition for the `SALIDADET_ID_GEN` generator :  */

CREATE GENERATOR SALIDADET_ID_GEN;

/* Definition for the `BI_SALIDADET_ID` trigger :  */

SET TERM ^ ;

CREATE TRIGGER BI_SALIDADET_ID FOR SALIDADET
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
  IF ((NEW.SALIDADETID IS NULL) OR (NEW.SALIDADETID = 0)) THEN
      NEW.SALIDADETID = GEN_ID(SALIDADET_ID_GEN, 1);
END^

SET TERM ; ^

/* Definition for the `SALIDA_ID_GEN` generator :  */

CREATE GENERATOR SALIDA_ID_GEN;

/* Definition for the `BI_SALIDA_ID` trigger :  */

SET TERM ^ ;

CREATE TRIGGER BI_SALIDA_ID FOR SALIDA
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
  IF ((NEW.SALIDAID IS NULL) OR (NEW.SALIDAID = 0)) THEN
      NEW.SALIDAID = GEN_ID(SALIDA_ID_GEN, 1);
END^

SET TERM ; ^

/* Definition for the `TIPOINSUMO_ID_GEN` generator :  */

CREATE GENERATOR TIPOINSUMO_ID_GEN;

/* Definition for the `BI_TIPOINSUMO_ID` trigger :  */

SET TERM ^ ;

CREATE TRIGGER BI_TIPOINSUMO_ID FOR TIPOINSUMO
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
  IF ((NEW.TIPOINSUMOID IS NULL) OR (NEW.TIPOINSUMOID = 0)) THEN
      NEW.TIPOINSUMOID = GEN_ID(TIPOINSUMO_ID_GEN, 1);
END^

SET TERM ; ^

/* Definition for the `STRLEN` UDF :  */

DECLARE EXTERNAL FUNCTION STRLEN
  CSTRING(32767) CHARACTER SET NONE
RETURNS INTEGER BY VALUE
ENTRY_POINT 'IB_UDF_strlen' MODULE_NAME 'ib_udf';

/* Definition for the `F_GEN_CODIGO` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE F_GEN_CODIGO(
  TIPOCODIGO INTEGER)
RETURNS(
  CODIGO VARCHAR(20))
AS
DECLARE VARIABLE PREFIJO VARCHAR(10);
DECLARE VARIABLE POSFIJO VARCHAR(10);
DECLARE VARIABLE LONGITUD INTEGER;
DECLARE VARIABLE ULTSECUENCIA INTEGER;
DECLARE VARIABLE SECUENCIA INTEGER;
DECLARE VARIABLE NUMEROTMP VARCHAR(20);
DECLARE VARIABLE NUMEROBLOQTMP VARCHAR(20);
BEGIN

  /*
        TIPO_CODIGO_COLABORADOR = 1;
        TIPO_CODIGO_AFECTADO    = 2;
        TIPO_CODIGO_INSUMO      = 3;
        TIPO_NUMERO_INVENTARIO  = 4;
        TIPO_NUMERO_ENTRADA     = 5;
        TIPO_NUMERO_SALIDA      = 6;
  */

  PREFIJO = '';
  POSFIJO = '';
  LONGITUD = 6;

  /* Se obtiene el número más grande que use el mismo prefijo y posfijo */
  
  IF (TIPOCODIGO = 1) THEN BEGIN

    SELECT
      MAX(CAST(SUBSTRING(C.CODIGO FROM STRLEN(:PREFIJO)+1 FOR :LONGITUD) AS INTEGER))
    FROM COLABORADOR C
    WHERE
      (SUBSTRING(C.CODIGO FROM 1 FOR STRLEN(:PREFIJO)) = (:PREFIJO))
      AND
      (SUBSTRING(C.CODIGO FROM (STRLEN(C.CODIGO)-STRLEN(:POSFIJO)+1) FOR STRLEN(:POSFIJO)) = :POSFIJO)
      AND
      (SUBSTRING(C.CODIGO FROM STRLEN(:PREFIJO) + 1 FOR :LONGITUD) SIMILAR TO '[0-9]+')
    INTO :ULTSECUENCIA;

  END ELSE IF (TIPOCODIGO = 2) THEN BEGIN

    SELECT
      MAX(CAST(SUBSTRING(C.CODIGO FROM STRLEN(:PREFIJO)+1 FOR :LONGITUD) AS INTEGER))
    FROM AFECTADO C
    WHERE
      (SUBSTRING(C.CODIGO FROM 1 FOR STRLEN(:PREFIJO)) = (:PREFIJO))
      AND
      (SUBSTRING(C.CODIGO FROM (STRLEN(C.CODIGO)-STRLEN(:POSFIJO)+1) FOR STRLEN(:POSFIJO)) = :POSFIJO)
      AND
      (SUBSTRING(C.CODIGO FROM STRLEN(:PREFIJO) + 1 FOR :LONGITUD) SIMILAR TO '[0-9]+')
    INTO :ULTSECUENCIA;

  END ELSE IF (TIPOCODIGO = 3) THEN BEGIN

    SELECT
      MAX(CAST(SUBSTRING(C.CODIGO FROM STRLEN(:PREFIJO)+1 FOR :LONGITUD) AS INTEGER))
    FROM INSUMO C
    WHERE
      (SUBSTRING(C.CODIGO FROM 1 FOR STRLEN(:PREFIJO)) = (:PREFIJO))
      AND
      (SUBSTRING(C.CODIGO FROM (STRLEN(C.CODIGO)-STRLEN(:POSFIJO)+1) FOR STRLEN(:POSFIJO)) = :POSFIJO)
      AND
      (SUBSTRING(C.CODIGO FROM STRLEN(:PREFIJO) + 1 FOR :LONGITUD) SIMILAR TO '[0-9]+')
    INTO :ULTSECUENCIA;

  END ELSE IF (TIPOCODIGO = 4) THEN BEGIN

    SELECT
      MAX(CAST(SUBSTRING(C.NUMERO FROM STRLEN(:PREFIJO)+1 FOR :LONGITUD) AS INTEGER))
    FROM INVENTARIO C
    WHERE
      (SUBSTRING(C.NUMERO FROM 1 FOR STRLEN(:PREFIJO)) = (:PREFIJO))
      AND
      (SUBSTRING(C.NUMERO FROM (STRLEN(C.NUMERO)-STRLEN(:POSFIJO)+1) FOR STRLEN(:POSFIJO)) = :POSFIJO)
      AND
      (SUBSTRING(C.NUMERO FROM STRLEN(:PREFIJO) + 1 FOR :LONGITUD) SIMILAR TO '[0-9]+')
    INTO :ULTSECUENCIA;
    
  END ELSE IF (TIPOCODIGO = 5) THEN BEGIN

    SELECT
      MAX(CAST(SUBSTRING(C.NUMERO FROM STRLEN(:PREFIJO)+1 FOR :LONGITUD) AS INTEGER))
    FROM ENTRADA C
    WHERE
      (SUBSTRING(C.NUMERO FROM 1 FOR STRLEN(:PREFIJO)) = (:PREFIJO))
      AND
      (SUBSTRING(C.NUMERO FROM (STRLEN(C.NUMERO)-STRLEN(:POSFIJO)+1) FOR STRLEN(:POSFIJO)) = :POSFIJO)
      AND
      (SUBSTRING(C.NUMERO FROM STRLEN(:PREFIJO) + 1 FOR :LONGITUD) SIMILAR TO '[0-9]+')
    INTO :ULTSECUENCIA;

  END ELSE IF (TIPOCODIGO = 6) THEN BEGIN

    SELECT
      MAX(CAST(SUBSTRING(C.NUMERO FROM STRLEN(:PREFIJO)+1 FOR :LONGITUD) AS INTEGER))
    FROM SALIDA C
    WHERE
      (SUBSTRING(C.NUMERO FROM 1 FOR STRLEN(:PREFIJO)) = (:PREFIJO))
      AND
      (SUBSTRING(C.NUMERO FROM (STRLEN(C.NUMERO)-STRLEN(:POSFIJO)+1) FOR STRLEN(:POSFIJO)) = :POSFIJO)
      AND
      (SUBSTRING(C.NUMERO FROM STRLEN(:PREFIJO) + 1 FOR :LONGITUD) SIMILAR TO '[0-9]+')
    INTO :ULTSECUENCIA;

  END

  IF (:ULTSECUENCIA IS NULL) THEN
    ULTSECUENCIA = 0;

  SECUENCIA = ULTSECUENCIA + 1;

  WHILE (1=1) DO BEGIN
    NUMEROTMP = :PREFIJO || LPAD(CAST(:SECUENCIA AS VARCHAR(10)), :LONGITUD, '0') || :POSFIJO;
    NUMEROBLOQTMP = '';
    SELECT NUMERO FROM NUMEROBLOQ WHERE (NUMERO = :NUMEROTMP) INTO :NUMEROBLOQTMP;
    IF ((NUMEROBLOQTMP IS NULL) OR (NUMEROBLOQTMP = '')) THEN BEGIN
      BREAK;
    END ELSE BEGIN
      SECUENCIA = SECUENCIA + 1;
    END
  END

  /* Formar el número PR NUM POS */
  CODIGO = :PREFIJO || LPAD(CAST(:SECUENCIA AS VARCHAR(10)), :LONGITUD, '0') || :POSFIJO;

  SUSPEND;

END^

SET TERM ; ^

/* Definition for the `D_BIGINT` domain :  */

CREATE DOMAIN D_BIGINT AS
  BIGINT;

/* Definition for the `D_BLOB1024` domain :  */

CREATE DOMAIN D_BLOB1024 AS
  BLOB SEGMENT SIZE 1024;

/* Definition for the `D_BLOB1024_1` domain :  */

CREATE DOMAIN D_BLOB1024_1 AS
  BLOB SUB_TYPE 1 SEGMENT SIZE 1024;

/* Definition for the `D_BLOB512` domain :  */

CREATE DOMAIN D_BLOB512 AS
  BLOB SEGMENT SIZE 512;

/* Definition for the `D_CALLEDOMICILIO` domain :  */

CREATE DOMAIN D_CALLEDOMICILIO AS
  VARCHAR(50);

/* Definition for the `D_COLONIA` domain :  */

CREATE DOMAIN D_COLONIA AS
  VARCHAR(50);

/* Definition for the `D_COLONIADOMICILIO` domain :  */

CREATE DOMAIN D_COLONIADOMICILIO AS
  VARCHAR(50);

/* Definition for the `D_CONTACTO` domain :  */

CREATE DOMAIN D_CONTACTO AS
  VARCHAR(60);

/* Definition for the `D_DOMICILIO` domain :  */

CREATE DOMAIN D_DOMICILIO AS
  VARCHAR(100);

/* Definition for the `D_EMAIL` domain :  */

CREATE DOMAIN D_EMAIL AS
  VARCHAR(60);

/* Definition for the `D_ESTADO` domain :  */

CREATE DOMAIN D_ESTADO AS
  VARCHAR(5);

/* Definition for the `D_ESTADODOMICILIO` domain :  */

CREATE DOMAIN D_ESTADODOMICILIO AS
  VARCHAR(50);

/* Definition for the `D_FLOAT` domain :  */

CREATE DOMAIN D_FLOAT AS
  FLOAT;

/* Definition for the `D_MEMO` domain :  */

CREATE DOMAIN D_MEMO AS
  VARCHAR(500);

/* Definition for the `D_NUMERIC_15_2` domain :  */

CREATE DOMAIN D_NUMERIC_15_2 AS
  NUMERIC(15, 2)
  DEFAULT 0;

/* Definition for the `D_NUMERIC_15_3` domain :  */

CREATE DOMAIN D_NUMERIC_15_3 AS
  NUMERIC(15, 3);

/* Definition for the `D_NUMERIC_15_5` domain :  */

CREATE DOMAIN D_NUMERIC_15_5 AS
  NUMERIC(15, 5);

/* Definition for the `D_NUMERIC_15_6` domain :  */

CREATE DOMAIN D_NUMERIC_15_6 AS
  NUMERIC(15, 6);

/* Definition for the `D_NUMERIC_18_8` domain :  */

CREATE DOMAIN D_NUMERIC_18_8 AS
  NUMERIC(18, 8)
  DEFAULT 0;

/* Definition for the `D_NUMERIC_5_1` domain :  */

CREATE DOMAIN D_NUMERIC_5_1 AS
  NUMERIC(5, 1);

/* Definition for the `D_NUMERODOMICILIO` domain :  */

CREATE DOMAIN D_NUMERODOMICILIO AS
  VARCHAR(10);

/* Definition for the `D_PAIS` domain :  */

CREATE DOMAIN D_PAIS AS
  VARCHAR(40);

/* Definition for the `D_PHONE` domain :  */

CREATE DOMAIN D_PHONE AS
  VARCHAR(30);

/* Definition for the `D_PHONEEXT` domain :  */

CREATE DOMAIN D_PHONEEXT AS
  VARCHAR(5);

/* Definition for the `D_PICTURE` domain :  */

CREATE DOMAIN D_PICTURE AS
  BLOB SUB_TYPE 1 SEGMENT SIZE 4000;

/* Definition for the `D_POBLACION` domain :  */

CREATE DOMAIN D_POBLACION AS
  VARCHAR(50);

/* Definition for the `D_RFC` domain :  */

CREATE DOMAIN D_RFC AS
  VARCHAR(20);

/* Definition for the `D_SHORTTEXT` domain :  */

CREATE DOMAIN D_SHORTTEXT AS
  VARCHAR(30);

/* Definition for the `D_SMALLINT` domain :  */

CREATE DOMAIN D_SMALLINT AS
  SMALLINT;

/* Definition for the `D_TEXT` domain :  */

CREATE DOMAIN D_TEXT AS
  VARCHAR(100);

/* Definition for the `D_VARCHAR_3` domain :  */

CREATE DOMAIN D_VARCHAR_3 AS
  VARCHAR(3);

/* Definition for the `D_VARCHAR_5` domain :  */

CREATE DOMAIN D_VARCHAR_5 AS
  VARCHAR(5);

/* Definition for the `D_VARCHAR1` domain :  */

CREATE DOMAIN D_VARCHAR1 AS
  VARCHAR(1);

/* Definition for the `D_VARCHAR3` domain :  */

CREATE DOMAIN D_VARCHAR3 AS
  VARCHAR(3);

/* Definition for the `D_VARCHAR30` domain :  */

CREATE DOMAIN D_VARCHAR30 AS
  VARCHAR(30);

/* Definition for the `D_VARCHAR300` domain :  */

CREATE DOMAIN D_VARCHAR300 AS
  VARCHAR(300);

/* Definition for the `D_VARCHAR5` domain :  */

CREATE DOMAIN D_VARCHAR5 AS
  VARCHAR(5);

/* Definition for the `D_ZIPCODE` domain :  */

CREATE DOMAIN D_ZIPCODE AS
  VARCHAR(10);

/* Definition for the `AFECTADONEC_ID_GEN` generator :  */

CREATE GENERATOR AFECTADONEC_ID_GEN;

/* Definition for the `ADDDAY` UDF :  */

DECLARE EXTERNAL FUNCTION ADDDAY
  TIMESTAMP,
  INTEGER
RETURNS TIMESTAMP
ENTRY_POINT 'addDay' MODULE_NAME 'fbudf';

/* Definition for the `ADDDAY2` UDF :  */

DECLARE EXTERNAL FUNCTION ADDDAY2
  TIMESTAMP,
  INTEGER,
  TIMESTAMP
RETURNS PARAMETER 3
ENTRY_POINT 'addDay2' MODULE_NAME 'fbudf';

/* Definition for the `ADDHOUR` UDF :  */

DECLARE EXTERNAL FUNCTION ADDHOUR
  TIMESTAMP,
  INTEGER
RETURNS TIMESTAMP
ENTRY_POINT 'addHour' MODULE_NAME 'fbudf';

/* Definition for the `ADDMILLISECOND` UDF :  */

DECLARE EXTERNAL FUNCTION ADDMILLISECOND
  TIMESTAMP,
  INTEGER
RETURNS TIMESTAMP
ENTRY_POINT 'addMilliSecond' MODULE_NAME 'fbudf';

/* Definition for the `ADDMINUTE` UDF :  */

DECLARE EXTERNAL FUNCTION ADDMINUTE
  TIMESTAMP,
  INTEGER
RETURNS TIMESTAMP
ENTRY_POINT 'addMinute' MODULE_NAME 'fbudf';

/* Definition for the `ADDMONTH` UDF :  */

DECLARE EXTERNAL FUNCTION ADDMONTH
  TIMESTAMP,
  INTEGER
RETURNS TIMESTAMP
ENTRY_POINT 'addMonth' MODULE_NAME 'fbudf';

/* Definition for the `ADDSECOND` UDF :  */

DECLARE EXTERNAL FUNCTION ADDSECOND
  TIMESTAMP,
  INTEGER
RETURNS TIMESTAMP
ENTRY_POINT 'addSecond' MODULE_NAME 'fbudf';

/* Definition for the `ADDWEEK` UDF :  */

DECLARE EXTERNAL FUNCTION ADDWEEK
  TIMESTAMP,
  INTEGER
RETURNS TIMESTAMP
ENTRY_POINT 'addWeek' MODULE_NAME 'fbudf';

/* Definition for the `ADDYEAR` UDF :  */

DECLARE EXTERNAL FUNCTION ADDYEAR
  TIMESTAMP,
  INTEGER
RETURNS TIMESTAMP
ENTRY_POINT 'addYear' MODULE_NAME 'fbudf';

/* Definition for the `DIV` UDF :  */

DECLARE EXTERNAL FUNCTION DIV
  INTEGER,
  INTEGER
RETURNS DOUBLE PRECISION BY VALUE
ENTRY_POINT 'IB_UDF_div' MODULE_NAME 'ib_udf';

/* Definition for the `DNULLIF` UDF :  */

DECLARE EXTERNAL FUNCTION DNULLIF
  DOUBLE PRECISION BY DESCRIPTOR,
  DOUBLE PRECISION BY DESCRIPTOR
RETURNS DOUBLE PRECISION BY DESCRIPTOR
ENTRY_POINT 'dNullIf' MODULE_NAME 'fbudf';

/* Definition for the `DNVL` UDF :  */

DECLARE EXTERNAL FUNCTION DNVL
  DOUBLE PRECISION BY DESCRIPTOR,
  DOUBLE PRECISION BY DESCRIPTOR
RETURNS DOUBLE PRECISION BY DESCRIPTOR
ENTRY_POINT 'idNvl' MODULE_NAME 'fbudf';

/* Definition for the `DOW` UDF :  */

DECLARE EXTERNAL FUNCTION DOW
  TIMESTAMP,
  VARCHAR(15)
RETURNS PARAMETER 2
ENTRY_POINT 'DOW' MODULE_NAME 'fbudf';

/* Definition for the `DPOWER` UDF :  */

DECLARE EXTERNAL FUNCTION DPOWER
  DOUBLE PRECISION BY DESCRIPTOR,
  DOUBLE PRECISION BY DESCRIPTOR,
  DOUBLE PRECISION BY DESCRIPTOR
RETURNS PARAMETER 3
ENTRY_POINT 'power' MODULE_NAME 'fbudf';

/* Definition for the `GETEXACTTIMESTAMP` UDF :  */

DECLARE EXTERNAL FUNCTION GETEXACTTIMESTAMP
  TIMESTAMP
RETURNS PARAMETER 1
ENTRY_POINT 'getExactTimestamp' MODULE_NAME 'fbudf';

/* Definition for the `GETEXACTTIMESTAMPUTC` UDF :  */

DECLARE EXTERNAL FUNCTION GETEXACTTIMESTAMPUTC
  TIMESTAMP
RETURNS PARAMETER 1
ENTRY_POINT 'getExactTimestampUTC' MODULE_NAME 'fbudf';

/* Definition for the `I64NULLIF` UDF :  */

DECLARE EXTERNAL FUNCTION I64NULLIF
  NUMERIC(18, 4) BY DESCRIPTOR,
  NUMERIC(18, 4) BY DESCRIPTOR
RETURNS NUMERIC(18, 4) BY DESCRIPTOR
ENTRY_POINT 'iNullIf' MODULE_NAME 'fbudf';

/* Definition for the `I64NVL` UDF :  */

DECLARE EXTERNAL FUNCTION I64NVL
  NUMERIC(18, 0) BY DESCRIPTOR,
  NUMERIC(18, 0) BY DESCRIPTOR
RETURNS NUMERIC(18, 0) BY DESCRIPTOR
ENTRY_POINT 'idNvl' MODULE_NAME 'fbudf';

/* Definition for the `I64ROUND` UDF :  */

DECLARE EXTERNAL FUNCTION I64ROUND
  NUMERIC(18, 4) BY DESCRIPTOR,
  NUMERIC(18, 4) BY DESCRIPTOR
RETURNS PARAMETER 2
ENTRY_POINT 'fbround' MODULE_NAME 'fbudf';

/* Definition for the `I64TRUNCATE` UDF :  */

DECLARE EXTERNAL FUNCTION I64TRUNCATE
  NUMERIC(18, 0) BY DESCRIPTOR,
  NUMERIC(18, 0) BY DESCRIPTOR
RETURNS PARAMETER 2
ENTRY_POINT 'fbtruncate' MODULE_NAME 'fbudf';

/* Definition for the `INULLIF` UDF :  */

DECLARE EXTERNAL FUNCTION INULLIF
  INTEGER BY DESCRIPTOR,
  INTEGER BY DESCRIPTOR
RETURNS INTEGER BY DESCRIPTOR
ENTRY_POINT 'iNullIf' MODULE_NAME 'fbudf';

/* Definition for the `INVL` UDF :  */

DECLARE EXTERNAL FUNCTION INVL
  INTEGER BY DESCRIPTOR,
  INTEGER BY DESCRIPTOR
RETURNS INTEGER BY DESCRIPTOR
ENTRY_POINT 'idNvl' MODULE_NAME 'fbudf';

/* Definition for the `ISLEAPYEAR` UDF :  */

DECLARE EXTERNAL FUNCTION ISLEAPYEAR
  TIMESTAMP
RETURNS INTEGER BY VALUE
ENTRY_POINT 'isLeapYear' MODULE_NAME 'fbudf';

/* Definition for the `LTRIM` UDF :  */

DECLARE EXTERNAL FUNCTION LTRIM
  CSTRING(255) NULL
RETURNS CSTRING(255) FREE_IT
ENTRY_POINT 'IB_UDF_ltrim' MODULE_NAME 'ib_udf';

/* Definition for the `ROUND` UDF :  */

DECLARE EXTERNAL FUNCTION ROUND
  INTEGER BY DESCRIPTOR,
  INTEGER BY DESCRIPTOR
RETURNS PARAMETER 2
ENTRY_POINT 'fbround' MODULE_NAME 'fbudf';

/* Definition for the `RTRIM` UDF :  */

DECLARE EXTERNAL FUNCTION RTRIM
  CSTRING(255) NULL
RETURNS CSTRING(255) FREE_IT
ENTRY_POINT 'IB_UDF_rtrim' MODULE_NAME 'ib_udf';

/* Definition for the `SDOW` UDF :  */

DECLARE EXTERNAL FUNCTION SDOW
  TIMESTAMP,
  VARCHAR(5)
RETURNS PARAMETER 2
ENTRY_POINT 'SDOW' MODULE_NAME 'fbudf';

/* Definition for the `SNULLIF` UDF :  */

DECLARE EXTERNAL FUNCTION SNULLIF
  VARCHAR(100) BY DESCRIPTOR,
  VARCHAR(100) BY DESCRIPTOR,
  VARCHAR(100) BY DESCRIPTOR
RETURNS PARAMETER 3
ENTRY_POINT 'sNullIf' MODULE_NAME 'fbudf';

/* Definition for the `SNVL` UDF :  */

DECLARE EXTERNAL FUNCTION SNVL
  VARCHAR(100) BY DESCRIPTOR,
  VARCHAR(100) BY DESCRIPTOR,
  VARCHAR(100) BY DESCRIPTOR
RETURNS PARAMETER 3
ENTRY_POINT 'sNvl' MODULE_NAME 'fbudf';

/* Definition for the `SRAND` UDF :  */

DECLARE EXTERNAL FUNCTION SRAND
RETURNS DOUBLE PRECISION BY VALUE
ENTRY_POINT 'IB_UDF_srand' MODULE_NAME 'ib_udf';

/* Definition for the `SRIGHT` UDF :  */

DECLARE EXTERNAL FUNCTION SRIGHT
  VARCHAR(100) BY DESCRIPTOR,
  SMALLINT,
  VARCHAR(100) BY DESCRIPTOR
RETURNS PARAMETER 3
ENTRY_POINT 'right' MODULE_NAME 'fbudf';

/* Definition for the `STRING2BLOB` UDF :  */

DECLARE EXTERNAL FUNCTION STRING2BLOB
  VARCHAR(300) BY DESCRIPTOR,
  BLOB
RETURNS PARAMETER 2
ENTRY_POINT 'string2blob' MODULE_NAME 'fbudf';

/* Definition for the `SUBSTR` UDF :  */

DECLARE EXTERNAL FUNCTION SUBSTR
  CSTRING(255) NULL,
  SMALLINT,
  SMALLINT
RETURNS CSTRING(255) FREE_IT
ENTRY_POINT 'IB_UDF_substr' MODULE_NAME 'ib_udf';

/* Definition for the `SUBSTRLEN` UDF :  */

DECLARE EXTERNAL FUNCTION SUBSTRLEN
  CSTRING(255) NULL,
  SMALLINT,
  SMALLINT
RETURNS CSTRING(255) FREE_IT
ENTRY_POINT 'IB_UDF_substrlen' MODULE_NAME 'ib_udf';

/* Definition for the `TRUNCATE` UDF :  */

DECLARE EXTERNAL FUNCTION TRUNCATE
  INTEGER BY DESCRIPTOR,
  INTEGER BY DESCRIPTOR
RETURNS PARAMETER 2
ENTRY_POINT 'fbtruncate' MODULE_NAME 'fbudf';

/* Definition for the `UDF_FRAC` UDF :  */

DECLARE EXTERNAL FUNCTION UDF_FRAC
  DOUBLE PRECISION
RETURNS DOUBLE PRECISION BY VALUE
ENTRY_POINT 'IB_UDF_frac' MODULE_NAME 'ib_udf';

/* Privileges for the `AFECTADO` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON AFECTADO TO COMPARSA;

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON AFECTADO TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `AFECTADOREQ` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON AFECTADOREQ TO COMPARSA;

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON AFECTADOREQ TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `COLABORADOR` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON COLABORADOR TO COMPARSA;

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON COLABORADOR TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `COLABORADORAPORTA` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON COLABORADORAPORTA TO COMPARSA;

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON COLABORADORAPORTA TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `ENTRADA` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON ENTRADA TO COMPARSA;

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON ENTRADA TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `ENTRADADET` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON ENTRADADET TO COMPARSA;

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON ENTRADADET TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `INSUMO` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON INSUMO TO COMPARSA;

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON INSUMO TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `INVENTARIO` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON INVENTARIO TO COMPARSA;

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON INVENTARIO TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `INVENTARIODET` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON INVENTARIODET TO COMPARSA;

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON INVENTARIODET TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `LOCALIDAD` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON LOCALIDAD TO COMPARSA;

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON LOCALIDAD TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `NUMEROBLOQ` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON NUMEROBLOQ TO COMPARSA;

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON NUMEROBLOQ TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `SALIDA` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON SALIDA TO COMPARSA;

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON SALIDA TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `SALIDADET` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON SALIDADET TO COMPARSA;

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON SALIDADET TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `TIPOINSUMO` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON TIPOINSUMO TO COMPARSA;

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON TIPOINSUMO TO SYSDBA WITH GRANT OPTION;

/* Privileges for the `F_GEN_CODIGO` :  */


GRANT EXECUTE ON PROCEDURE F_GEN_CODIGO TO COMPARSA;

GRANT EXECUTE ON PROCEDURE F_GEN_CODIGO TO SYSDBA;

